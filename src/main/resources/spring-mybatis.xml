<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    					http://www.springframework.org/schema/tx
    					http://www.springframework.org/schema/tx/spring-tx.xsd
    					http://www.springframework.org/schema/aop 
        				http://www.springframework.org/schema/aop/spring-aop.xsd">
	<aop:aspectj-autoproxy/>
	<!-- 扫描指定包里面的类，注册不包含@Controller注解的类为bean -->
	<context:component-scan base-package="com.cdintelligent">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="com.cdintelligent.znzx.common.encrypt.EncryptJdbcConfig">
        <property name="fileEncoding" value="UTF-8" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:portal.properties</value>
			</list>
		</property>
	</bean>

	<bean class="com.cdintelligent.znzx.common.utils.PropsUtils$Resolver" lazy-init="false" />
    <bean class="com.cdintelligent.znzx.common.utils.ServiceUtils$Resolver" lazy-init="false" />
    <bean class="com.cdintelligent.znzx.common.utils.ServiceUtils$Listener" lazy-init="false">
        <property name="executor" ref="basic.scheduler" />
    </bean>

    <bean id="basic.scheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
        <property name="poolSize" value="${basic.scheduler.poolSize}" />
        <property name="threadNamePrefix" value="${basic.scheduler.threadNamePrefix}" />
    </bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"/>
		<!-- 校验 -->
		<property name="validationQuery" value="${validationQuery.value}" />
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"/>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"/>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"/>
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />

	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:configuration.xml"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/cdintelligent/**/mapping/*.xml"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=oracle
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cdintelligent.znzx.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 启动spring注解功能注解事务,标注@Transactional的类和方法将具有事务性 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>